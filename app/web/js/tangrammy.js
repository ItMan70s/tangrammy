var fixedbottom = false;// ignore console error for IE8,9if (!window.console || !console.firebug){    var names = ["log", "debug", "info", "warn", "error", "assert", "dir", "dirxml", "group", "groupEnd", "time", "timeEnd", "count", "trace", "profile", "profileEnd"];    window.console = {};    for (var i = 0; i < names.length; ++i) {        window.console[names[i]] = function() {}	}}$(document).ready(function(){	if ($("#container")[0]) {		if ($(".go-top")[0]) {			$(".go-top").css("left", ($("#container").offset().left - 40));		}		if ($(".left-toolbar")[0]) {			$(".left-toolbar").css("left", ($("#container").offset().left - 100));		}		if ($(".right-toolbar")[0]) {			$(".right-toolbar").css("left", ($("#container").offset().left + $("#container").width() + 20));		}		if ($(".section-action")[0]) {			var sty = $(".section-action").attr("style") + ";width: " + $("#container").width() + "px;";			$(".section-action").attr("style", sty);		}	};		$.cookie('ctz', (new Date()).getTimezoneOffset() * -1, {path: "/"});	fixedbottom = ($(".section-action")[0]) ? true:false;	$(window).scroll(refreshFixBottom);	refreshFixBottom();	$('input[type="checkbox"]').each(function () { refreshCheckStyle(this.parentNode, this.checked); });	$('input[type="radio"]').each(function () { refreshCheckStyle(this.parentNode, this.checked); });	$('[filter]').each(function () {var $this = $(this); if (!$this.attr("title")) {$this.attr("title", "Ctrl+click to filt all");} });		$('[name=oneremove], [name=oneupdate], [name=onemsg]').each(function () { 		var $self = $(this);		var val = ($self.attr("url") || "").mid("format=json&");		if (!val) {			return;		}		if ($self.closest("TR").find("[fid='" + val.mid(0, "=") + "'][val='" + val.mid("=") + "']")[0]) {			$self.addClass("disabled").attr("name", "");			var parent = this.parentNode;			if (parent.nodeName == "LI") {				$(parent).addClass("disabled");			}		}	});	// $('.richtext').each(function () { initRichText(this); });		// wrap file upload to make good view//	$('.btn-upload').each(function () { $(this).bootstrapFileInput();});		// active top links 	if ($(".backup")[0]) {		$(".backup").html("<a href='/" + $("[name='app']").val() + "/list' >" + document.title.mid(0, " ") + "</a>");	}})function initRichText(rtext) {	var options = {"icons": ["/img/s/b1.png", "/img/s/b2.png", "/img/s/b3.png", "/img/s/b4.png", "/img/s/b5.png", "/img/s/b6.png", "/img/s/b7.png", "/img/s/b8.png", "/img/s/f1.png", "/img/s/f2.png", "/img/s/f3.png", "/img/s/f4.png", "/img/s/f5.png", "/img/s/f6.png", "/img/s/f7.png", "/img/s/f8.png", "/img/s/os.hp.png", "/img/s/os.linux.png", "/img/s/os.redhat.png", "/img/s/os.win.png", "/img/s/s4.png", "/img/s/s5.png", "/img/s/s7.gif", "/img/s/t1.png", "/img/s/t2.png", "/img/s/t3.png", "/img/s/t4.png", "/img/s/t5.png", "/img/s/t6.png", "/img/s/t7.png", "/img/s/t8.png", "/img/add.png", "/img/copy.png", "/img/detail.png", "/img/edit.png", "/img/remove.png", "/img/search.png"]};	if ($(rtext).attr("p") == "no") {		options["p"] = "no";	}	if ($(rtext).attr("lines")) {		options["lines"] = true;	}		richtext($(rtext).attr("id"), options);}richTextOptions = {"icons": ["/img/s/b1.png", "/img/s/b2.png", "/img/s/b3.png", "/img/s/b4.png", "/img/s/b5.png", "/img/s/b6.png", "/img/s/b7.png", "/img/s/b8.png", "/img/s/f1.png", "/img/s/f2.png", "/img/s/f3.png", "/img/s/f4.png", "/img/s/f5.png", "/img/s/f6.png", "/img/s/f7.png", "/img/s/f8.png", "/img/s/os.hp.png", "/img/s/os.linux.png", "/img/s/os.redhat.png", "/img/s/os.win.png", "/img/s/s4.png", "/img/s/s5.png", "/img/s/s7.gif", "/img/s/t1.png", "/img/s/t2.png", "/img/s/t3.png", "/img/s/t4.png", "/img/s/t5.png", "/img/s/t6.png", "/img/s/t7.png", "/img/s/t8.png", "/img/add.png", "/img/copy.png", "/img/detail.png", "/img/edit.png", "/img/remove.png", "/img/search.png"]};function initRichTextLine(rtext) {	var options = {"icons": ["/img/s/b1.png", "/img/s/b2.png", "/img/s/b3.png", "/img/s/b4.png", "/img/s/b5.png", "/img/s/b6.png", "/img/s/b7.png", "/img/s/b8.png", "/img/s/f1.png", "/img/s/f2.png", "/img/s/f3.png", "/img/s/f4.png", "/img/s/f5.png", "/img/s/f6.png", "/img/s/f7.png", "/img/s/f8.png", "/img/s/os.hp.png", "/img/s/os.linux.png", "/img/s/os.redhat.png", "/img/s/os.win.png", "/img/s/s4.png", "/img/s/s5.png", "/img/s/s7.gif", "/img/s/t1.png", "/img/s/t2.png", "/img/s/t3.png", "/img/s/t4.png", "/img/s/t5.png", "/img/s/t6.png", "/img/s/t7.png", "/img/s/t8.png", "/img/add.png", "/img/copy.png", "/img/detail.png", "/img/edit.png", "/img/remove.png", "/img/search.png"]};	richtextline($(rtext).attr("id"), options);}function refreshFixBottom() {	return;	if (!fixedbottom) {		return;	}	if (isScrolledIntoView($('[name="bottom"')[0])) {		$(".section-action").removeClass("fixed-bottom");	} else {		$(".section-action").addClass("fixed-bottom");	}}$(document).on("blur", "[passconfirm]", function(e){	var self = this;	var target = $("[name=" + $(self).attr("passconfirm") + "]")[0];	var dclass = ($(target).val() != $(self).val()) ? "alert-danger" : "alert-success";	$(self.parentNode.parentNode).attr("class", dclass);	$(target.parentNode.parentNode).attr("class", dclass);});// Show/hide edit buttons/links$(document).on("click", "[name='EditMode']", function() { switchEditMode(false);});$(document).on("dblclick", "[name='EditMode']", function() { switchEditMode(true);});function switchEditMode(completely) {	var $self = $("[name='EditMode']");	if ($self.attr("class").indexOf("green") < 0) {		$self.addClass("green");		//		$(completely ? 'tr.group, thead th, td' : 'thead th, td').each(function () { 			if (!$(this).attr("fid") || $(this).attr("fid").match(/^(diy|new|show|edit|copy|remove|list)/gi)) {				$(this).show();			}		});	} else {		$self.removeClass("green");		$(completely ? 'tr.group, thead th, td' : 'thead th, td').each(function () { 			if (!$(this).attr("fid") || $(this).attr("fid").match(/^(diy|new|show|edit|copy|remove|list)/gi)) {				$(this).hide();			}		});	}	}var ctrlKeyPressed = false;$(document).on('keyup keydown', function(e) {  ctrlKeyPressed = e.ctrlKey; });$(document).on("change", "[unique=true]", checkUnique);$(document).on("click", "[name='search']", function() {search($("[name='ids']").val(), $("[name='filterstring']").val());});$(document).on("dblclick", "td span", function() {$(this).attr("class").indexOf("expended") > -1 ? $(this).removeClass("expended") : $(this).addClass("expended");});$(document).on("keyup", "[name='filterstring']", doFilter);$(document).on("mouseup", "[name='filterstring']", doFilter);$(document).on("click", "[name=login]", login);$(document).on("keyup", "[name=uPassword]", function(e){;if(e.keyCode==13){doLogin();}});//$(document).on("click", "[name=reg]", reg);$(document).on("click", "[filter]", function() {var val = (ctrlKeyPressed ? $("[name='filterstring']").val() + " + " : "") + $(this).attr("filter"); $("[name='filterstring']").val(val); doFilter();$("[name='filterstring']").focus();});$(document).on("click", "[name=remove]", function() {remove(this);});function minus(a, b) { return Number.valueOf(a) - Number.valueOf(b)}$(document).on("click", "#scrollTop",function(){  	$("html,body").animate({scrollTop: 0},"slow");  });  $(document).on("click","#scrollBack",function(){  	$("html,body").animate({scrollTop: $(window).scrollTop() - 600}, "slow");  });  $(document).on('change', 'input[type="checkbox"]', function(){	refreshCheckStyle(this.parentNode, this.checked);});$(document).on('change', 'input[type="radio"]', function(){	$('input[name="' + this.name + '"]').each(function () { refreshCheckStyle(this.parentNode, this.checked); });});$(document).on('change', '.Reservation', function(){	refreshReservation(this.parentNode.parentNode);});/*$(document).on('focus', '[contenteditable="true"]', function(){	var obj = $("[name='" + $(this).attr('target') + "']"); 	if (obj[0]) {		$(this).html(obj.val());	} });$(document).on('blur', '[contenteditable="true"]', function(){	var obj = $("[name='" + $(this).attr('target') + "']"); 	if (obj[0]) {		obj.val($(this).html());	} else {		$(this).siblings('[type="hidden"]').val($(this).html());	}});*/$(document).on("submit", function(){//	$('[contenteditable="true"]').each(function() { var obj = $("[name='" + $(this).attr('target') + "']"); if (obj[0]) obj.val($(this).html());});//	$('.richtext').each(function() { $(this).siblings('[type="hidden"]').val($(this).html());});	$(".Reservation").each(function() {		refreshReservation(this.parentNode.parentNode);	});	book();	if ($("#submitFrame")[0]) {		try {			var msg = ""; // checkFields();			if (msg.length > 0) {				warn(msg);				return false;			}		} catch (e) {};		doSubmit();	}});$(document).on("click","#scrollNext",function(){  	$("html,body").animate({scrollTop: $(window).scrollTop() + 600}, "slow");  });  $(document).on('change', '[selectall=true]', function(){	var chk = this.checked;	$(this.parentNode.parentNode).find('input[type="checkbox"]').each(function () { this.checked = chk; refreshCheckStyle(this.parentNode, this.checked);});});/*$(document).on("click","[download]",function(){	var $this = $(this);	var $source = $($this.attr("source") || "table");	$this.attr("download", $("[name=app]").val() + (new Date()).format("yyyyMMdd") + ".csv");	var content = "";	$source.find('tr').each(function () { 		var $tr = $(this);		if ($tr.hasClass("group") || $tr.hasClass("fhidden")) {			return;		}		if (!$tr.attr("sub")) {			content += "\n";		}				$tr.find('th, td').each(function () { 			var $td = $(this);			if (!$td.attr("fid") || $td.attr("fid").match(/^(diy|new|show|edit|copy|remove|list)/gi)) {				return;			}			var txt = $td.text();			if (txt.match(/^ *$/g)) {				txt = $td.find("[title]").attr("title") || "";			}			if (txt.match(/,"\n/g)) {				txt = '"' + txt.replace(/"/g, '""') + '"';			}			content += txt + ', ';		});	});	if (content.charAt(0) == '\n') {		content = content.substr(1);	}	this.href='data:text/plain;charset=UTF-8,'+encodeURIComponent(content);	return;});  */$(document).on("click","[download]",function(){	var $this = $(this);	var $source = $($this.attr("source") || "table");	var fname = ".csv";	if ($this.attr("download").indexOf("xls") > -1) {		fname = ".xls";	}	fname = $("[name=app]").val() + (new Date()).format("yyyyMMdd") + fname;	$this.attr("download", fname);	if (fname.endsWith(".xls")) {		return tableToExcel($this, fname);	}	var content = "";	$source.find('tr').each(function () { 		var $tr = $(this);		if ($tr.hasClass("group") || $tr.hasClass("fhidden")) {			return;		}		if (!$tr.attr("sub")) {			content += "\n";		}				$tr.find('th, td').each(function () { 			var $td = $(this);			if (!$td.attr("fid") || $td.attr("fid").match(/^(diy|new|show|edit|copy|remove|list)/gi)) {				return;			}			var txt = $td.text();			if (txt.match(/^ *$/g)) {				txt = $td.find("[title]").attr("title") || "";			}			if (txt.match(/,"\n/g)) {				txt = '"' + txt.replace(/"/g, '""') + '"';			}			content += txt + ', ';		});	});	if (content.charAt(0) == '\n') {		content = content.substr(1);	}	$this[0].href='data:text/plain;charset=UTF-8,'+encodeURIComponent(content);	return;});  function tableToExcel(target) {	$this = target;	var $source = $($this.attr("source") || "table");	var id = "tab" + (new Date() - 0);	$(document.body).append("<table class='hide' id='" + id + "'>" + $source.html() + "</table>");	$source = $("#" + id);	var content = "";	$source.find('tr').each(function () { 		var $tr = $(this);		if ($tr.hasClass("group") || $tr.hasClass("fhidden")) {			$tr.remove();			return;		}		if (!$tr.attr("sub")) {		}				$tr.find('th, td').each(function () { 			var $td = $(this);			if (!$td.attr("fid") || $td.attr("fid").match(/^(diy|new|show|edit|copy|remove|list)/gi)) {				$td.remove();				return;			}			var txt = $td.text();			if (txt.match(/^ *$/g)) {				txt = $td.find("[title]").attr("title") || "";				$td.html(txt);			}		});	});		content = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40">\n' + 		'<head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>\n' + 		$("[name=app]").val() + '</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]-->' + 		'<style>.right{text-align:right;}\n' + 		'.red{color: #FF0000;}\n' + 		'.green{color: #008000;}\n' + 		'.yellow{color: #FFFF00;}\n' + 		'.gold{color: #FFD700;}\n' + 		'.orange{color: #FFA500;}\n' + 		'.pink{color: #FFC0CB;}\n' + 		'.cyan{color: #00FFFF;}\n' + 		'.blue{color: #0000FF;}\n' + 		'.deepskyblue{color: #00BFFF;}\n' + 		'.purple{color: #800080;}\n' + 		'.black{color: #000000;}\n' + 		'.silver{color: #C0C0C0;}\n' + 		'.maroon{color: #800000;}\n' + 		'.white{color: #FFFFFF;}\n' + 		'</style>\n</head>\n' + 		'<body>\n<table>' + $source.html().replace(/\<img [^>]+\/img\/[^>]+>/gi, "").replace(/\n+/g, "\n") + '</table>\n</body>\n</html>';    $this[0].href = 'data:application/vnd.ms-excel;charset=UTF-8,' + encodeURIComponent(content);	return;}$(document).on('change', 'input[type="file"]', function(){	if ($(this).attr("data-edit") == "insertImage") {		// richtext function		return;	}    var xmlHttpReq = null;    if (window.ActiveXObject) {          xmlHttpReq = new ActiveXObject("Microsoft.XMLHTTP");      } else if (window.XMLHttpRequest) {          xmlHttpReq = new XMLHttpRequest();      }      if (!xmlHttpReq) {		return;	}	    var filenode = this.parentNode;	$(filenode).addClass("disabled");	var obj = $(this.parentNode.parentNode).find('input[type="hidden"]');	var target = obj.attr("name");	var ftype = obj.attr("ftype");	xmlHttpReq.onreadystatechange = function () {  		if (xmlHttpReq.readyState == 1) {  			$(filenode).addClass("disabled");		}		if (xmlHttpReq.readyState == 4) {			$(filenode).removeClass("disabled");			if (xmlHttpReq.status == 200) {				$(filenode).removeClass("disabled");				$("[name='" + target + "']").val(xmlHttpReq.responseText);				var json = (xmlHttpReq.responseText + "").toJSON() || {};				var htm = "";				if (ftype == "img") {					htm = '<img src="' + json.url + '">';				} else {					htm = '<a href="' + json.url + '">' + json.realname + '</a>';				}				if ($("[name='" + target + "_link']")[0]) {					$("[name='" + target + "_link']").html(htm);				} else {					$("[name='" + target + "']").after('<span name="' + target + '_link">' + htm + '</span>');				}				// TODO error			}  		}	}  	var form = new FormData();  	form.append("file", this.files[0]);	xmlHttpReq.open("POST", "/upload/" + $("[name='app']").val(), true);//	xmlHttpReq.setRequestHeader("Content-Type","multipart/form-data");	xmlHttpReq.send(form);	this.value = null;});$(document).on('change', '.search-zone input', function(){	refreshAS();});$(document).on('click', '[name="advancesearch"]', function(){	var cond = '{';	for (var i in asCond) {		cond += ((i == '$or') ? ', ' + i + ': ' : ', "' + i + '": ') + asCond[i] + '';	}	cond = cond.replace("{, ", "{") + '}';		var opt = "";	var txt = "";	$(".search-zone").find("input").each(function() {		switch($(this).attr("type").toLowerCase()) {			case "text":				txt += this.value + "TANGRAMMY_TXT";			break;			case "checkbox":			case "radio":				opt += (this.checked ? 1 : 0) + " ";			break;		}	});	txt += opt;		window.location.href = "/" + $("[name='app']").val() + "/search?szone=" + encodeURI(txt) + "&adcond=" + encodeURI(cond);});	/*	var body = $("body")[0];	if (body.scrollHeight - body.clientHeight < 600) {		$(".go-top").attr("class", "go-top hidden");	} else {		$(".go-top").attr("class", "go-top");	}	*/$(document).on('click', '.amvc-group-v', function(){	if ($(this).attr("class").indexOf("editable") < 0) {		return;	}	var target = $(this.parentNode).find(".mvc-group-m")[0];	var self = this;	editWithRichText(target, function() {$(self).html($(target).val())});});$(document).on('change', '.amvc-group-m', function(){	var view = $(this.parentNode.parentNode.parentNode).find(".mvc-group-v");		if (view.attr("class").indexOf("editable") < 0) {		return;	}	view.html($(this).val());});function editWithRichText(source, callback) {	var title = "Edit";	var btn1 = "Save";	var btn2 = "Cancel";	$('#ConfirmModal').find('.modal-header h3').html(title);	$('#ConfirmModal').find('.modal-body').html("<div class='controls'><div id='editor_F1dd' contenteditable='true' class='richtext' lines=true>" + ($(source).val() || $(source).html()) + "</div></div>");	initRichText($("#editor_F1dd")[0]);	$('#ConfirmModal').find('.confirm-btn').html(btn1);	$('#ConfirmModal').find('.confirm-cancelbtn').html(btn2);	if (!btn2) {		$('#ConfirmModal').find('.confirm-cancelbtn').hide();	} else {		$('#ConfirmModal').find('.confirm-cancelbtn').show();	}		$('#ConfirmModal').find('.confirm-btn').unbind();	$('#ConfirmModal').find('.confirm-btn').bind( 'click', function(e){		if (!$(source).val()) {			$(source).val($("#editor_F1dd").html());		} else {			$(source).html($("#editor_F1dd").html());		}		if (callback) callback();		$('#ConfirmModal').modal("hide");		setTimeout(function() {$(source).focus();}, 2);	});	$('#ConfirmModal').find('.confirm-cancelbtn').unbind();	$('#ConfirmModal').find('.confirm-cancelbtn').bind( 'click', function(){		if ( typeof cancel == 'function' ) {			cancel();		}		$('#ConfirmModal').modal("hide");		setTimeout(function() {$(source).focus();}, 2);			});	$('#ConfirmModal').modal("show");}function confirm(title, message, btn1, btn2, action, cancel) {	$('#ConfirmModal').find('.modal-header h3').html(title);	$('#ConfirmModal').find('.modal-body').html(message);	$('#ConfirmModal').find('.confirm-btn').html(btn1);	$('#ConfirmModal').find('.confirm-cancelbtn').html(btn2);	if (!btn2) {		$('#ConfirmModal').find('.confirm-cancelbtn').hide();	} else {		$('#ConfirmModal').find('.confirm-cancelbtn').show();	}	$('#ConfirmModal').find('.confirm-btn').unbind();	$('#ConfirmModal').find('.confirm-btn').bind( 'click', function(e){		if ( typeof action == 'function' ) {			action();		} else {			window.location.href = action;		}		$('#ConfirmModal').modal("hide");	});	$('#ConfirmModal').find('.confirm-cancelbtn').unbind();	$('#ConfirmModal').find('.confirm-cancelbtn').bind( 'click', function(){		if ( typeof cancel == 'function' ) {			cancel();		}		$('#ConfirmModal').modal("hide");	});	$('#ConfirmModal').modal("show");}function warn(message) {	//confirm("Warning", message, "OK", null, function() {}, function() {});	showModalView("WARNING", "<div class='row'><div class='col-md-1'><img src='/img/l/warning.png'></div><div class='col-md-11'>" + message + "</div></div>", "  OK  ");}function error(message) {	//confirm("Warning", message, "OK", null, function() {}, function() {});	showModalView("ERROR", "<div class='row'><div class='col-md-1'><img src='/img/l/error.png'></div><div class='col-md-11'>" + message + "</div></div>", "  OK  ");}function changePassword(rid, fid) {	var msg = '<div class="row">\n' +'		<div class="col-md-12"><div><label class="control-label">Current Password*</label><div class="controls">\n' +'<input type="password" class="form-control" name="oPassword" value="" required="true" ></div></div></div>\n' +'		<div class="col-md-12"><div><label class="control-label">New Password*</label><div class="controls">\n' +'<input type="password" class="form-control" name="nPassword" value="" required="true" ></div></div></div>\n' +'		<div class="col-md-12"><div><label class="control-label">New Password again*</label><div class="controls">\n' +'<input type="password" class="form-control" passconfirm="nPassword" value="" required="true" ></div></div></div>\n' +'</div>\n';	showModalView("Change Password", msg, "OK", "Cancel", 	function() {	//var pass = $("[name='nPassword']").val();	function cancel(msg){}	function success(data, textStatus) {		var json = (typeof(data) == "string") ? (data + "").toJSON() : data;		if (json.code != 200) {			warn(json.message || "Wrong user name or password!");		}	};	//var cond = '{"Rid": "' + rid + '", "' + fid + '": "' + $("[name=oPassword]").val() + '"}';	//ajaxExec("post", "/i/login?format=json&cond=" + cond, success, cancel, function(){$(self).addClass("disabled");}, null);	ajaxExec("post", "/i/chpwd?Rid=" + rid + "&format=json&passwd=" + $("[name=oPassword]").val() + "&" + fid + "=" + $("[name='nPassword']").val(), success, cancel, function(){$(self).addClass("disabled");}, null);	},	function() {	});}// <div class="modal in" id="FieldEditModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="false" style="display: block;">var modaltemplate = '<div style="position: fixed; top: 0; right: 0; bottom: 0; left: 0; overflow: hidden;  -webkit-overflow-scrolling: touch; outline: 0; z-index: 1050;background-color: #343434 !important;float:left;overflow:hidden;display:none;-moz-opacity:0.5; filter:alpha(opacity=50);opacity:0.5" tabindex="-1"></div>' + '<div style="position: fixed; top: 60px; right: 0; bottom: 0; left: 0; z-index: 1051;"><div class="modal-dialog" style="margin-left: auto; margin-right: auto;">' + '  <div class="modal-content ui-draggable" >' + '	<div class="modal-header">' + '        <button type="button" close="#modaltemplate" class="glyphicon glyphicon-remove list-item win-close" title="Close"></button>' + '<h3 class="h3-modaltemplate"></h3></div>' + '	<div class="modal-body"></div>' + '	<div class="modal-footer"><a href="javascript:;" close="#modaltemplate" class="btn btn-success confirm-btn ok-modaltemplate" style="min-width:80px;">OK</a><a href="javascript:;" close="#modaltemplate" class="btn confirm-cancelbtn cancel-modaltemplate" style="min-width:80px;">Cancel</a></div>' + '</div>' + '</div>' + '</div>';var loginHtm = '<div class="modal" id="LoginModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">' + '  <div class="modal-dialog">' + '    <div class="modal-content">' + '      <div class="modal-header">' + '        <button type="button" class="glyphicon glyphicon-remove list-item win-close" title="Close" close="modal"></button>' + '        <h3 class="modal-title">Login</h3>' + '      </div>' + '      <div class="modal-body">' + '<div class="row">' + '		<div class="col-md-12"><div><label class="control-label">User Name*</label><div class="controls">' + '<input type="text" class="form-control" name="uName" value="" required="true" placeholder="User name or email address"></div></div></div>' + '		<div class="col-md-12" name="passsecion"><div><label class="control-label">Password*</label>' + '        <a href="javascript:resetPassword()" class="btn ">Forgot?</a><div class="controls">' + '<input type="password" class="form-control" name="uPassword" value=""></div></div></div>' + '		<div class="col-md-12 alert"><div><label class="control-label"></label></div></div>' + '</div>' + '</div>' + '      <div class="modal-footer">' + '        <a href="#" class="btn btn-success wid90 confirm-btn" style="min-width:80px;">Login</a>' + '        <a href="javascript:reg()" name="regesiter" class="btn" style="min-width:80px;">Regesiter</a>' + '        <a href="#" class="btn confirm-cancelbtn" style="min-width:80px;">Cancel</a>' + '      </div>' + '    </div>' + '  </div>' + '</div>';$(document).on("click", "[close]", function() {closeView($(this).attr("close"))});function closeView(id) {	if (!id || !$(id)[0]) return;	$(id).hide();	var obj = $(id)[0];	obj.parentNode.removeChild(obj); }var views = 1;function showModalView(title, body, ok, cancel, action, cancel) {	var id = "ModalView_" + (views++);	body = (body.indexOf("modal-body") > 0) ? body : '	<div class="modal-body">' + body + '</div>';	body = body.replace(/data-dismiss="modal"/gi, "close='#" + id + "'");	var htm = $('#ModalView').html() + "<div id='" + id + "'>" + modaltemplate.replace(/modaltemplate/gi, id).replace(/z-index: 105/gi, 'z-index: ' + (105 + views)).replace('	<div class="modal-body"></div>', body) + "</div>";	if ("WARNING" == title) {		htm = htm.replace(" fade", "");	}	$('#ModalView').html(htm); 	var modalView = $('#' + id).find('div');	modalView.find('.h3-' + id).html(title);//	modalView.find('.modal-body').html(body);	modalView.find('.ok-' + id).html(ok);	modalView.find('.cancel-' + id).html(cancel);	if (!cancel) {		modalView.find('.cancel-' + id).hide();	}	modalView.find('.win-close').unbind();	modalView.find('.win-close').bind( 'click', close);		modalView.find('.ok-' + id).unbind();	modalView.find('.ok-' + id).bind( 'click', function(e){		if ( typeof action == 'function' ) {			action(id, e);		}	});		modalView.find('.cancel-' + id).unbind();	modalView.find('.cancel-' + id).bind( 'click', function(e){		if ( typeof cancel == 'function' ) {			cancel(id, e);		}	});	//display: block;	modalView.show();	//modalView.draggable();}var timeout = 0;function login() {	if (new Date() - timeout > 2000) {		timeout = new Date() - 0;	} else {		return ;	}	if (!$('#LoginModal')[0]) {		$('#ModalView').html($('#ModalView').html() + loginHtm);	}	$('#LoginModal').find('.modal-header h3').html("User Login");	$('#LoginModal').find('.confirm-btn').html("Login");	$('#LoginModal').find('.confirm-btn').removeClass("disabled");	$('#LoginModal').find('.confirm-btn').unbind();//	$('[name=regesiter]').show();//	$('[name=passsecion]').show();		$("[name='uName']").val($.cookie('uName' + window.location.port));	$('#LoginModal').find('.alert').html("");	$('#LoginModal').find('.alert').removeClass("alert-danger");	$('#LoginModal').find('.confirm-btn').bind( 'click', doLogin);	function closeModal() {		$('#LoginModal').modal("hide");	}	$('#LoginModal').find('.win-close').unbind();	$('#LoginModal').find('.win-close').bind( 'click', closeModal);		$('#LoginModal').find('.confirm-cancelbtn').unbind();	$('#LoginModal').find('.confirm-cancelbtn').bind( 'click', closeModal);	$('#LoginModal').modal("show");	if ($("[name='uName']").val()) {		$("[name='uPassword']").focus();	} else {		$("[name='uName']").focus();	}	}function doLogin(e) {	document.cookie = "";	function success(data, textStatus){		$('#LoginModal').find('.confirm-btn').removeClass("disabled"); 		var json = (typeof(data) == "string") ? (data + "").toJSON() : data;//var json = (data + "").toJSON(); 		if (json.code == 200) {				var name = $("[name='uName']").val();			$('#LoginModal').modal("hide"); 			$.cookie('uName' + window.location.port, name, {path: "/", expires: 7});			$("[name=login]").addClass("hidden"); 			$("[name=reg]").addClass("hidden"); 			var html = $("[name=userinfo]").html();			var url = $.cookie('userurl' + window.location.port);			html = html.replace("uname", name).replace("userurl", url);			html = html.replace("rid", url.substring(url.indexOf("=") + 1)); 			$("[name=userinfo]").html(html);			$("[name=userinfo]").removeClass("hidden"); 			if ($(".homepage")[0]) {				window.location.reload();			}		} else {			$('#LoginModal').find('.alert').addClass('alert-danger'); 			$('#LoginModal').find('.alert-danger').html(json.message); 			$('#LoginModal').modal("show"); 		}	}	function cancel(data, textStatus){ $('#LoginModal').find('.alert').addClass('alert-danger'); $('#LoginModal').find('.alert-danger').html(data); $('#LoginModal').find('.confirm-btn').removeClass("disabled");}		var pass = $("[name='uPassword']").val().replace(/"/g, '\"');	var name = $("[name='uName']").val().replace(/"/g, '\"');	if (name.contains("@")) {		name = '"Email": "' + name + '"'	} else {		name = '"UName": "' + name + '"'	}	var cond = '{' + name + ', "UPass": "' + pass + '"}';	$('#LoginModal').find('.confirm-btn').addClass("disabled");	ajaxExec("get", "/i/login?format=json&cond=" + cond, success, cancel, function(){});}function reg() {	var msg = '<div class="row">\n' +'		<div class="col-md-12"><div><label class="control-label">Email Address*</label><div class="controls">\n' +'<input type="text" class="form-control" name="email" value="" required="true"  placeholder="User email address"></div></div></div>\n' +'</div>\n';	showModalView("User Register", msg, "Register", "Cancel", 	function() {	var mail = $("[name='email']").val();	function cancel(msg){;}	function success(data, textStatus) {		if (("" + data).indexOf("F2") > -1) {			document.cookie = "";			warn("Click the link in email to finish register.");		} else {			warn("Failed to register." + data);		}	};	ajaxExec("post", "/i/register?format=json&email=" + mail, success, cancel, cancel, null);		},	function() {	});}function resetPassword() {	if ($('#LoginModal')[0]) $('#LoginModal').modal("hide");	var msg = '<div class="row">\n' +'		<div class="col-md-12"><div><label class="control-label">Email Address*</label><div class="controls">\n' +'<input type="text" class="form-control" name="email" value="" required="true"  placeholder="User email address"></div></div></div>\n' +'</div>\n';	showModalView("Forgot Password", msg, "EMail", "Cancel", 	function() {	var mail = $("[name='email']").val();	function cancel(msg){;}	function success(data, textStatus) {		if (("" + data).indexOf("F2") > -1) {			warn("Click the link in email to change your password.");		} else {			warn("Failed to reset your password." + data);		}	};	ajaxExec("post", "/i/register?format=json&email=" + mail, success, cancel, cancel, null);		},	function() {	});}function remove(self) {	var td = self.parentNode;	var hml = "" + $(td).html();	var aUrl = $(self).attr("url") + "";	var rid = "[rid='" + aUrl.substr(aUrl.indexOf("=") + 1) + "']";	function success(data, textStatus){ $(rid).each(function () { this.parentNode.removeChild(this); }); }	function cancel(msg){$(td).html(hml);}		var opt = {"Title": 'Remove?'};	opt["Body"] = 'Continue to remove current recorder?';	opt["Cancel"] = cancel;	ajaxExec("get", aUrl, success, cancel, function(){$(td).html("Removing...");}, opt);}refreshCheckStyle(this.parentNode, this.checked);function refreshCheckStyle(obj, checked) {	if (!obj) {		return;	}	if (checked) {		$(obj).removeClass("check");		$(obj).addClass("checked");	} else {		$(obj).addClass("check");		$(obj).removeClass("checked");	}}function book() {	if (!$('[name=Reservation]')[0]) {		return;	}	var req = $('[name=Reservation]').val();	if (req.length < 1) {		return;	}	function cancel() {};	ajaxExec("post", "/" + $("[name='app']").val() + "/update?Rid=" + $("[name='Rid']").val() +"&format=json&Reservation=" + req, cancel, cancel, cancel, null);	$('[name=Reservation]').val("");}function oneClick(self, action) {	var aUrl = $(self).attr("url") || "";	if (aUrl == "") {		return;	}	var rid = "[rid='" + aUrl.mid("=","&") + "']";	function success(data, textStatus){		try {		switch(action) {		case "refresh":			var json = (typeof(data) == "string") ? (data + "").toJSON() : data;//var json = (data + "").toJSON(); 			if (json.code == 200) {				refreshRows(aUrl.mid("=","&"));			} else if (json.code == 406) {				warn(json.error);			} else {				warn(data);			}			break;		case "remove":			$(rid).each(function () {  this.parentNode.removeChild(this); }); 			//$(this).slideToggle("slow",function(){ });			break;		case "warn":			warn(data);			break;		default:			break;		}		} catch(e) {			warn(data);		}	};	function cancel(msg){$(self).removeClass("disabled 5s-enable");}	ajaxExec("post", aUrl, success, cancel, function(){$(self).addClass("disabled 5s-enable");}, null);	setTimeout(function() {$(".5s-enable").each(function(){$(this).removeClass("disabled 5s-enable");});}, 5000);}//"Done": {"Title": "Copy", "label": "Done", "icon": "", "type": "button", "css": "btn btn-success", "href": "\/T4\/V2\/update?Rid=<%= data[item][\"Rid\"] %>&format=json&F2=3", "name": "onedone", "func": "xxx",$(document).on("click", "[name=oneremove]", function () { oneClick(this, "remove");  });$(document).on("click", "[name=oneupdate]", function () { oneClick(this, "refresh"); });$(document).on("click", "[name=onemsg]", function () { oneClick(this, "warn"); });$(document).on("blur", "[name=blurupdate]", function () { 	var $self = $(this);	var orginal = $self.attr("orginal");	if (orginal) {		orginal = $("[name='" + orginal + "']").html();		if (orginal == $self.html()) {			return; // no changes		}	}	var aUrl = $self.attr("url") + "" + encodeURI($self.html());	function success(data, textStatus){		$self.removeClass("disabled");	};	function cancel(msg){$self.removeClass("disabled");}	ajaxExec("post", aUrl, success, cancel, function(){$self.addClass("disabled");}, null); });/*//DIY//PGRpdiBjbGFzcz0iYnRuLWdyb3VwIGJ0bi1ncm91cC14cyAiPg0gIDxhPjwvYT4NICA8YSBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IiBuYW1lPSJvbmVyZW1vdmUiIHVybD0iL1Q0L1YyL3VwZGF0ZT9SaWQ9PCU9IGRhdGFbaXRlbV0uUmlkICU+JmZvcm1hdD1qc29uJkYyPTMiID5Eb25lPC9hPg0gIDxhIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgZHJvcGRvd24tdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iPg0JPHNwYW4gY2xhc3M9ImNhcmV0Ij48L3NwYW4+Lg0gIDwvYT4NICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiIHJvbGU9Im1lbnUiPg0JPGxpPjxhIG5hbWU9Im9uZXVwZGF0ZSIgaHJlZj0iamF2YXNjcmlwdDo7IiB1cmw9Ii9UNC9WMi91cGRhdGU/UmlkPTwlPSBkYXRhW2l0ZW1dLlJpZCAlPiZmb3JtYXQ9anNvbiZGMj0wIiBjbGFzcz0iYmx1ZSI+PGltZyBjbGFzcz0iaWNvbjE1IiBzcmM9Ii9pbWcvcy9iMS5wbmciPkluaXRpYWw8L2E+PC9saT4NCTxsaT48YSBuYW1lPSJvbmV1cGRhdGUiIGhyZWY9ImphdmFzY3JpcHQ6OyIgdXJsPSIvVDQvVjIvdXBkYXRlP1JpZD08JT0gZGF0YVtpdGVtXS5SaWQgJT4mZm9ybWF0PWpzb24mRjI9MSIgY2xhc3M9ImdyZWVuIj48aW1nIGNsYXNzPSJpY29uMTUiIHNyYz0iL2ltZy9zL2IyLnBuZyI+SW4gcHJvZ3Jlc3M8L2E+PC9saT4NCTxsaT48YSBuYW1lPSJvbmV1cGRhdGUiIGhyZWY9ImphdmFzY3JpcHQ6OyIgdXJsPSIvVDQvVjIvdXBkYXRlP1JpZD08JT0gZGF0YVtpdGVtXS5SaWQgJT4mZm9ybWF0PWpzb24mRjI9MiIgY2xhc3M9Im9yYW5nZSI+UGF1c2VkPC9hPjwvbGk+DSAgPC91bD4NPC9kaXY+// Done$(document).on("click", "[name=oneremove]", function () {	var self = this;	var aUrl = $(this).attr("url") + "";	var rid = "[rid='" + aUrl.mid("=","&") + "']";	function success(data, textStatus){	var json = (data + "").toJSON(); 	if (json.code == 200) {		$(rid).each(function () { this.parentNode.removeChild(this); }); }	}	function cancel(msg){$(self).removeClass("disabled");}	ajaxExec("post", aUrl, success, cancel, function(){$(self).addClass("disabled");}, null);});$(document).on("click", "[name=oneupdate]", function () {	var self = this;	var aUrl = $(this).attr("url") + "";	var rid = "[rid='" + aUrl.mid("=","&") + "']";	function success(data, textStatus){	var json = (data + "").toJSON(); 	if (json.code == 200) {		refreshRows(aUrl.mid("=","&"));	}	};	function cancel(msg){$(self).removeClass("disabled");}	ajaxExec("post", aUrl, success, cancel, function(){$(self).addClass("disabled");}, null);});//JChkb2N1bWVudCkub24oImNsaWNrIiwgIltuYW1lPW9uZWRvbmVdIiwgZnVuY3Rpb24gKCkgew0KCXZhciBzZWxmID0gdGhpczsNCgl2YXIgYVVybCA9ICQodGhpcykuYXR0cigidXJsIikgKyAiIjsNCgl2YXIgcmlkID0gIltyaWQ9JyIgKyBhVXJsLm1pZCgiPSIsIiYiKSArICInXSI7DQoJZnVuY3Rpb24gc3VjY2VzcyhkYXRhLCB0ZXh0U3RhdHVzKXsNCgl2YXIganNvbiA9IChkYXRhICsgIiIpLnRvSlNPTigpOyANCglpZiAoanNvbi5jb2RlID09IDIwMCkgew0KCQkkKHJpZCkuZWFjaChmdW5jdGlvbiAoKSB7IHRoaXMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzKTsgfSk7IH0NCgl9DQoJZnVuY3Rpb24gY2FuY2VsKG1zZyl7JChzZWxmKS5yZW1vdmVDbGFzcygiZGlzYWJsZWQiKTt9DQoJYWpheEV4ZWMoInBvc3QiLCBhVXJsLCBzdWNjZXNzLCBjYW5jZWwsIGZ1bmN0aW9uKCl7JChzZWxmKS5hZGRDbGFzcygiZGlzYWJsZWQiKTt9LCBudWxsKTsNCn0pOw==// Doing// JChkb2N1bWVudCkub24oImNsaWNrIiwgIltuYW1lPW9uZWRvXSIsIGZ1bmN0aW9uICgpIHsNCgl2YXIgc2VsZiA9IHRoaXM7DQoJdmFyIGFVcmwgPSAkKHRoaXMpLmF0dHIoInVybCIpICsgIiI7DQoJdmFyIHJpZCA9ICJbcmlkPSciICsgYVVybC5taWQoIj0iLCImIikgKyAiJ10iOw0KCWZ1bmN0aW9uIHN1Y2Nlc3MoZGF0YSwgdGV4dFN0YXR1cyl7DQoJdmFyIGpzb24gPSAoZGF0YSArICIiKS50b0pTT04oKTsgDQoJaWYgKGpzb24uY29kZSA9PSAyMDApIHsNCgkJcmVmcmVzaFJvd3MoYVVybC5taWQoIj0iLCImIikpOw0KCX0NCgl9Ow0KCWZ1bmN0aW9uIGNhbmNlbChtc2cpeyQoc2VsZikucmVtb3ZlQ2xhc3MoImRpc2FibGVkIik7fQ0KCWFqYXhFeGVjKCJwb3N0IiwgYVVybCwgc3VjY2VzcywgY2FuY2VsLCBmdW5jdGlvbigpeyQoc2VsZikuYWRkQ2xhc3MoImRpc2FibGVkIik7fSwgbnVsbCk7DQp9KTs=*/function checkUnique() {	var self = this;	var hml = $(self).html();	var name = $(self).attr("name") + "";	var val = $(self).val() + "";	var rid = ($("[name='Rid']").val() + "").replace(/"/g, '\"');	var cond = '{"Rid": {$ne: "' + rid + '"}, "' + name + '": "' + val + '"}';	$.ajax({		type: "get",		url: "/" + $("[name='app']").val() + "/search?format=json&cond=" + cond,		success: function(data, textStatus){			var dclass = (("" + data).search("Rid: ") > -1) ? "alert-danger" : "alert-success";			$(self.parentNode.parentNode).attr("class", dclass);		}	});}function doFilter() {	filt($("[name='filterstring']").val());}var filterString = "";function filt(text) {	text = text || "";	if (filterString == text) {		return;	}		filterString = text;	if ("" == text) {		$("tr[rid]").each(function () {			$(this).removeClass("fhidden");		});		summary();		return;	}		var rids = ",";	var regs = text.split(/ *\+ */g);	for (var i in regs) {		regs[i] = new RegExp(regs[i], "ig");	}	$("tr[rid]").each(function () { 		for (var i in regs) {			if ($(this).html().search(regs[i]) < 0) { 				return;			}		}		rids += $(this).attr("rid") + ","; 	});		$("tr[rid]").each(function () { 		if (rids.contains("," + $(this).attr("rid") + ",")) {			$(this).removeClass("fhidden");		} else {			$(this).addClass("fhidden");		}	});	summary();}function gotoPage(page) {	if (page < 0) {		return;	}	var ids = $("[name='ids']").val();	var val = $("[name='filterstring']").val();	if (!ids || !val) {		page = (page < 1) ? "" : "page=" + page;		var href = window.location.href;		if (href.indexOf("page=") > 0) {			href = href.replace(/page=\d+/gi, page);		} else {			href = href + ((href.indexOf("?") > 0)? "&" : "?") + page;		}		window.location.href = href.replace(/\?#?&/g, "?").replace(/\?$/g, "");	} else {		search(ids, val, page);	}}function search(ids, val, page) {	page = page > 0 ? "&page=" + page : "";		if (!ids) return;		if (!val || val == "") {		window.location.href = "/" + $("[name='app']").val() + "/list" + page.replace("&", "?");		return;	}	ids = ids.split(",");	//todo other match	// only find contains for now.	var cond = "{$or : [";	for (var i = 0; i < ids.length; i++) {		if (!ids[i] || !ids[i].startsWith("F")) { continue;}		cond += "{'" + ids[i] + "': /.*" + val + ".*/gi},";	}	cond = cond.substr(0, cond.length - 1) + "]}";	window.location.href = "/" + $("[name='app']").val() + "/search?condition=" + val + "&cond=" + cond + page;}function ajaxGet(url, sucess, error) {	ajaxExec("get", url, sucess, error);}function ajaxPost(url, sucess, error) {	ajaxExec("Post", url, sucess, error);}function ajaxExec(rType, rUrl, rSuccess, rError, preFun, options, cancel) {	function callback(){preFun(); $.ajax({type: rType, url: rUrl, success: rSuccess, error: rError});}	if (options && "Body" in options) {		// options = {"title": 'Remove?', 'Continue to remove current recorder?'}		confirm(options["Title"], options["Body"], "OK", "Cancel", callback, options["Cancel"]);	} else {		callback();	}}function refreshReservation(section){	var t0 = $(section).find('.t0').val();	t0 = t0 ? '"t0": "' + t0 + '", ' : '';	var t1 = $(section).find('.t1').val();	var memo = $(section).find('.memo').val();	var html = '';	$(section).find('.cancel').each(function() {		if (this.checked) {			html += ', "remove": {"Rid": "' + $(this.parentNode.parentNode).attr("rid") + '"}';		}	});	if (t1 && t1.length > 0) {		html += ', "add": {' + t0 + '"t1": ' + t1 + ', "memo": "' + memo + '"}';	}	if (html.length > 0) {		html = html.substring(2);	}	$(section).find('[name=Reservation]').val(html);}// Todo update sub rowfunction refreshRows(rid) {	if (!rid || ! $("[rid='" + rid + "']")[0]) return;		var cond = '{"Rid":"' + rid + '"}';	$.ajax({		type: "get",		url: "/" + $("[name='app']").val() + "/search?cond=" + cond,		success: function(data, textStatus){			data += "";			data = data.substring(data.indexOf(rid), data.lastIndexOf("</tr>"));			if (!data.contains("</td>")) {				return;			}			var cells = data.split("</tr>");			var i, j;			for (i = 0; i < cells.length; i++) {				cells[i] = cells[i].split("</td>");				for (j = 0; j < cells[i].length; j++) {					cells[i][j] = cells[i][j].mid("<td").mid(">");				}			}			i = 0;						data = ""; 			$("[rid='" + rid + "']").each(function () {				j = 0;				$(this).find("td").each(function () {					$(this).html(cells[i][j++]);				}); 				i++;			}); 		},		error: function(data){  warn("Failed to performance update. \nPlease refresh page then try again, or go to edit page to update. \nError Detail:\n" + data);}	});}function isScrolledIntoView(elem){	try {    var docViewTop = $(window).scrollTop();    var docViewBottom = docViewTop + $(window).height();    var elemTop = $(elem).offset().top;    var elemBottom = elemTop + $(elem).height();    return !((elemBottom <= docViewBottom) && (elemTop >= docViewTop));	} catch(e) {return true;}}function findParentTag(obj, name) {	if (!obj) {		return null;	}	var tag = obj;	while(tag && tag.nodeName != name) {		tag = tag.parentNode;	}	return (tag) ? tag : null;}function showError(name, error) {	var target = $("[name=" + name + "]")[0];	while ($(target).attr("class") != "controls") {		target = target.parentNode;	}	target = target.parentNode;	if (error) {		$(target).addClass("alert-danger");		$("[name=" + name + "]").focus();	} else {		$(target).removeClass("alert-danger");	}}function doSubmit() {	$("[type='submit']").addClass("disabled");	var htm = $(window.frames["submitFrame"].document.body).html();		if (htm && htm.contains("code")) {		var json = {code: htm.mid('"code":', ",")};		// htm = htm.substring(htm.indexOf("{"), htm.lastIndexOf("}") + 1);		// var json = (typeof(htm) == "string") ? htm.trim().toJSON() : htm;		// to avoid to huge to pase		if (json.code.contains("200")) {			if (htm.contains('"Rid"')) {				window.location.href="/" + $("[name='app']").val() + "/show?Rid=" + htm.mid('"Rid":', ",").trim().mid('"', '"');			} else {				warn("Updated successfully.");			}		} else {			if (htm.contains('"message"')) {				var msg = htm.mid('"message":', ",").trim();				warn(msg || "Unkonwn error code: " + json.code);			} else {				warn("Unkonwn error code: " + json.code);			}			$(window.frames["submitFrame"].document.body).html("");			$("[type='submit']").removeClass("disabled");		}	} else {		setTimeout("doSubmit()", 3);	}}$(document).on("click","tr.group",function(){	if ($(this).html().indexOf("glyphicon-minus") > 0) {		$(this).html($(this).html().replace("glyphicon-minus-sign", " glyphicon-plus-sign"));		$(this).nextUntil("tr.group").addClass("ghidden");	} else {		$(this).html($(this).html().replace("glyphicon-plus-sign", " glyphicon-minus-sign"));		$(this).nextUntil("tr.group").removeClass("ghidden");	}	summary();});$(document).on("click","span.group",function(){	hideSearchZone(true);});function hideSearchZone(flag) {	if (flag) {		$("html,body").animate({scrollTop: 0},"slow");  		$(".search-zone").slideToggle("slow",function(){ });	} else {		$(".search-zone").fadeIn(600);	}}function summary() {	var sumid = "";	try {sumid = summaryid || "";} catch(e) {};	if (sumid == "") {		$("th.summary").each(function() {			sumid += " " + $(this).attr("fid");		});	}	var htm = "";	var ids = sumid.trim().split(" ");	for (var i in ids) {		if(ids[i].length < 1) continue;				var sum = 0;		var len = 0;		$("[rid]:visible > td[fid='" + ids[i] + "']").each(function() {			//sum = eval(sum + " + " + $(this).html());			// $(this).removeClass("number");			// $(this).addClass("number");			var val = $(this).html();			if (val.contains(".")){				len = Math.max(len, val.split(".")[1].length);			}			sum += new Number(val);		});		htm += "<br>" + $("th[fid='" + ids[i] + "']:first").html() + ": <b>" + parseFloat(sum).toFixed(len) + "</b>";	}	if ($(".summaryarea")[0] && htm != "") {		$(".summaryarea").html(htm.substr(4));	}}function initAS(val) {	if (!val) return;		var values = (val + "").split("TANGRAMMY_TXT");	var opts = values.pop().split(" ");		$(".search-zone").find("input").each(function() {		switch($(this).attr("type").toLowerCase()) {			case "text":				this.value = values.shift();			break;			case "checkbox":				this.checked = (opts.shift() == 1);			break;			case "radio":				this.checked = (opts.shift() == 1);			break;		}	});	refreshAS();}var asCond = {};function refreshAS() {	var htm = "";	asCond = {};	$(".search-zone TR").each(function() {		var cnt = [0, 0];		var txt = "";		var opt = "";		var name = "";		var val = "";		var reg = false;		var hasdate = false;		var hastime = false;		$(this).find("input").each(function() {			if (!$(this).attr("selectall")) {				name = $(this).attr("target");			}			if ($(this).attr("data-format")) {				if ($(this).attr("data-format") == 'YYYY/MM/DD') {					hasdate = true;				}				if ($(this).attr("data-format") == 'hh:mm:ss') {					hastime = true;				}			}			switch($(this).attr("type").toLowerCase()) {				case "text":					if (cnt[0] == 0) {						txt = this.value;					} else {						if (hasdate && hastime) {							if (cnt[0] == 1){								txt += (this.value.length > 0) ? (" " + this.value) : "";							} else if (cnt[0] == 2){								txt += "~" + this.value;							} else {								txt += (this.value.length > 0) ? (" " + this.value) : "";							}						} else {							txt += "~" + this.value;						}					}					if (cnt[0] > 1 && (hasdate || hastime) && txt != "" && txt != "~"){						var r1 = "{$gte : '" + txt.mid(0, "~") + "', $lte : '" + txt.mid("~") + "'}";						r1 = r1.replace("$gte : '',", "").replace(", $lte : ''}", "}");						asCond[name] = r1;						htm += "<span class='fixed-rectangle'>" + $(findParentTag(this, "TD")).find(".line-header").html() + " " + txt + "</span>";						txt = "";					}					cnt[0]++;				break;				case "checkbox":					if (!$(this).attr("selectall")) {						if (this.checked) {							opt += ", " + $(this.parentNode).html().mid(">");							val += "," + this.value;						}						cnt[1]++;					}					if ($(this).attr("reg")) {						reg = true;					}				break;				case "radio":					if (this.checked && this.value.length > 0) {						asCond[name] = "{$gte : \"" + this.value.mid(0, "~") + "\", $lt : \"" + this.value.mid("~") + "\"}";						htm += "<span class='fixed-rectangle'>" + $(findParentTag(this, "TD")).find(".line-header").html() + " " + $(this.parentNode).html().mid(">") + "</span>";					}				break;			}		});				txt = txt.trim();		if (txt == "~") {			txt = "";		}		if (val != "") {			val = val.substr(1);		}		// ignore seleced options in input + checkbox + checkbox mode		if (cnt[0] == 1 && cnt[1] > 0) {			if (txt == "" || opt == "") {				val = txt = opt = "";			} else {				asCond['$or'] = '[{"' + val.split(",").join('" : /.*' + txt + '.*/g} ,{"') + '" : /.*' + txt + '.*/g}]';				name = val = "";				txt = opt.substr(2).replace(/, /g, " or ") + " contains " + txt;				opt = "";			}		}		if (opt != "") {			if (cnt[1] > 0 && reg) {				asCond[name] = "/.*(" + val.replace(/, ?/g, "|").replace(/\.0/g, ".0?") + ").*/g";			} else {				asCond[name] = "{ $in : [" + val + "] }";			}			htm += "<span class='fixed-rectangle'>" + $(this).find(".line-header").html() + " " + opt.substr(2) + "</span>";		}		if (txt != "") {			htm += "<span class='fixed-rectangle'>";			if (cnt[0] == 1 && cnt[1] > 0) {				// no			} else if (cnt[0] == 2) {				var r1 = "{$gte : '" + txt.mid(0, "~") + "', $lte : '" + txt.mid("~") + "'}";				r1 = r1.replace("$gte : '',", "").replace(", $lte : ''}", "}");				asCond[name] = r1;				htm += $(this).find(".line-header").html();			} else {				asCond[name] = "/.*" + txt + ".*/g";				htm += $(this).find(".line-header").html().replace(":", " contains ");			}			htm += " " + txt + "</span>";		}	});	$('[name="selectedcondition"]').html(htm);	$('[name="selectedcondition"]').removeClass("hidden");	$('[name="selectedconditiontitle"]').removeClass("hidden");}function getOPLogs(tid, vid, rid) {	function cancel(msg){}	function success(data, textStatus) {		var json = (typeof(data) == "string") ? (data + "").toJSON() : data;		if (json.code == 200) {			var html = "";			for (var i = json.data.length - 1; i > -1; i--) {				var log = json.data[i];				if (!log) continue;				html += log.ts + " ";				if (log.u) {					if (log.u.contains("@")) {						log.u = log.u.mid(":", "@");					} else if (log.u.contains(":")) {						log.u = log.u.mid(0, ":");					}					if ("undefined" == log.u) {						log.u = "Guest";					}					html += log.u;				}				switch ((log.o || "")) {				case "i":					html += " created this recorder<br>";					break;				case "r":					html += " removed this recorder<br>";					break;				default:					html += " updated " + (log.f || "nothing") + "<br>";					break;				}			}			if (html.length > 0) {				html = "<br><b>History:</b><br><span class='spanval'>" + html + "</span>";				var his = $("[name='history']");				if (his[0]) {					his.html(html.replace(/\n/gi, "<br>").replace(/(\<br\>)+/gi, "<br>"));				}			}		}	};	var cond = '{t:"' + tid + '",v:"' + vid + (rid ? '",r:"' + rid : "") + '"}';	ajaxExec("post", '/Op/search?format=json&cond=' + cond, success, cancel, cancel, null);}function showRichText(text) {// a b big body br caption center cite code col comment dd div dl dt em embed fieldSet font head hn hr i img input ins kbd label legend li ol p ruby s small span strike strong style sub sup table tBody td tFoot th tHead title tr tt u ul // 	// replace(/(<[^\/]>|<[^\/][^>]*[^\/]>)\s*<\/[^>]*>/g, "");	text = text.replace(/(<[^>]*[>]?)|(>)/g, function(source){		// no harm tags			var alm = $(".alert-area");		if (source.match(/<[\/]?(a|b|big|body|br|caption|center|cite|code|col|comment|dd|div|dl|dt|em|embed|fieldset|font|head|hn|hr|i|img|input|ins|kbd|label|legend|li|ol|p|ruby|s|small|span|strike|strong|style|sub|sup|table|tbody|td|tfoot|th|thead|title|tr|tt|u|ul)( .*)*[\/]?>/gi)) {			alm.html(alm.html() + "<br />no harm tags: " + source.replace("<", "lt").replace(">", "gt"));			return source;		}		source = source.replace("<", "&lt;").replace(">", "&gt;");		alm.html(alm.html() + "<br />others: " + source);				return source;	});	return text;}// How to run script: eval & Function// var code = "(function (val) {" + funcs[i] + "}())";// var result = eval.call(data[i], code.replace('{"', '{').replace('"}', '}'));// var val = data[i];// var result = Function("val", funcs[i].mid(1, funcs[i].length - 1))(data[i]);// var result = eval(code);	  	  function getDateEditHtml(name, val, must, rule, format, simple) {	var hml = "";	hml += "<span><input type='hidden' name='" + name + "' value='" + val + "' must='" + must + "' rule='" + rule + "' ></input>";	var dat = getDate(val);	var tmp = getDateTimeFormat(format);	for (var i in tmp) {		switch (tmp[i]) {			case "YYYY":			case "YY":			case "MM":			case "DD":			case "hh":			case "mm":			case "ss":				hml += "<input type='text' name='dtinput' t='" + tmp[i] + "' value='" + (dat?dat.val(tmp[i]):"") + "' size='" + tmp[i].length + "' maxlength='" + tmp[i].length + "' class='number' ></input>";				break;			case "ZZZ":				hml += formateTZ(timezone);				break;			default:				hml += tmp[i];		}	}	if (!simple) {		hml += "<input type='button' name='dtclear' value='zzb[106]'/><input type='button' name='dtnow' value='zzb[107]'/> ";	}	hml += "</span>";	return hml;}function Duration() {	this.format = "YYYY/MM/DD hh:mm";	this.endDate = false;}Duration.prototype.show = function(val, html) {	if (!val) return "";	// format: 13000864684~13001864684	var idx = val.indexOf("+");	if (idx < 0) return showDateTime("15", this.format, val);	return showDateTime("15", this.format, val.substring(0, idx)) + "~" + showDateTime("15", this.format, (new Number(val.substring(0, idx))) + (new Number(val.substr(idx + 1))));}Duration.prototype.edit = function(name, val, must, rule, simple) {	var hml = "";	var idx = val.indexOf("+");	if (idx < 0) {		idx = val.length;	}	if (!this.endDate) {		hml = getDateEditHtml(name, val.substring(0, idx), must, rule, this.format, simple);		var posLabel = hml.indexOf("</input>") + "</input>".length;		hml = hml.mid(0, posLabel) + "zzb Start Time:" + hml.mid(posLabel, "</span>");		var ms = 0;		if (idx < val.length) {			ms = val.substr(idx + 1);		}		hml += "<br/>zzb Duration:<select name='' t='duration'>";		var options = new Array(0, 0.5, 1, 1.5, 2, 2.5, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 18, 24, 36, 48,72);		for (var i in options) {			if (options[i] * 3600000 == ms) {				hml += "<option value='" + options[i] * 3600000 + "' selected='true'>" + options[i] + "</option>";						} else {				hml += "<option value='" + options[i] * 3600000 + "'>" + options[i] + "</option>";			}		}				hml += "</select><label>zzb hour(s)</label></span>";	} else {		hml = "<span><input type='hidden' name='" + name + "' value='" + val + "'></input>";		hml += getDateEditHtml("dtDuration", val.substr(0, idx), must, rule, this.format, simple) + "<span>~</span>";		hml += getDateEditHtml("dtDuration", val.substr(idx + 1), must, rule, this.format, simple) + "</span>";	}	return hml;}function Reservation() {	this.format = "YYYY/MM/DD hh:mm";	this.dtype = "16";	this.vals = null;	this.now = (new Date()).now();	// 86400000 = 24 hours * 3600 seconds * 1000 ms	this.today = (new Date()).now() - (new Date()).now() % 86400000;}Reservation.prototype.show = function(val, html, toedit) {	if (!val) return "";	if (this.vals == null) {		this.vals = this.toArray(val);	}		var rtn = "";		var end = "";	var done = false;	var f = "";	var t = "";	for (var i = 0; i < this.vals.length; i += 3) {		if (rtn.length > 0) {			rtn += html ? "<br/>" : "\n";		}		done = false;		if (this.vals[i+1] > this.now) {			if (this.vals[i] < this.now + 300000) {				// 5 minutes closer marked with red color too				rtn +=  "<font style='color: red;'>";			} else {				rtn +=  "<font style=''>";			}		} else {			done = true;			rtn +=  "<font style='color: gray;text-decoration:line-through;'>";		}		f = showDateTime("15", this.format, this.vals[i]);		t = showDateTime("15", this.format, this.vals[i+1]);		if (f.substring(0, 11) == t.substring(0, 11)) {			t = t.substr(11);		}		rtn += f + " ~ " + t;		if (this.vals[i+2].length > 0) {			if(html) {				if (this.vals[i+2] == umail){					rtn += ' <span class="icon16" style="background-image: url(/APPNAME/img/email.png);">' + uname + '</span>';					if (toedit && !done){						var id = "chk_cr_" + this.now + "_" + (rnd++);						rtn += "  <input type='checkbox' name='CancelReservation' id='" + id + "' val='" + this.vals[i] + ":" + this.vals[i+2] + "'><label for='" + id + "'>zzbCancel</label></input>";					}				} else {					rtn += " <a href='mailto:" + this.vals[i+2] + "'><span class='icon16' style='background-image: url(/APPNAME/img/email.png);'>" + this.vals[i+2].substring(0, this.vals[i+2].indexOf("@")) + "</span></a>";				}			} else {				rtn += this.vals[i+2];			}		}		rtn += "</font>";	}		return rtn;}Reservation.prototype.edit = function(name, val, must, rule) {	var rtn = this.show(val, true, true);	if (rtn.length > 0) {		rtn += "<br/><br/>";	}	rtn += (new Duration()).edit("duration_new", this.now + "", "N", rule, true);	// TODO disable booked time	// TODO how to handle the case in new Application	// TODO how to handle the case in new View	// TODO how to handle the update rule in DB	val = (val + ";\n").replace(/;+\n/gi, ";");	if (!val.contains("__DW_MIX__")) {		val = "__DW_MIX__" + val;	}	rtn = "<span><input type='hidden' name='" + name + "' value='" + val + "' must='" + must + "' ></input>" + rtn + "</span>";		return rtn;}Reservation.prototype.validate = function(val, ms, plus) {	var arr = this.toArray(val);	var ms1 = new Number(ms);	var ms2 = ms1 + (isNaN(plus)? 1 : new Number(plus));	var msg = "";	for (var i = 0; i < arr.length; i += 3) {		if (isNaN(arr[i+1]) || isNaN(arr[i])) {			continue;		}		if (!(arr[i+1] <= ms1 || arr[i] >= ms2)) {			msg += " Failed at " + arr[i+1] + "<=" + ms1 + "|| " + arr[i] + ">=" + ms2;			break;		}	}	return msg;}Reservation.prototype.toArray = function(val) {	var vals = val.split(/;/gi);	var arr = new Array();	var tmp = 0;	var tmp0 = 0;	for (var i in vals) {		var idx0 = vals[i].indexOf('+');		var idx1 = vals[i].indexOf(':');		if (!vals[i].contains('@') && idx1 < 1) {			idx1 = vals[i].length;		}		if (idx0 < 0 || idx1 < 0 || idx0 > idx1) {			continue;		}		tmp = vals[i].substring(0, idx0);		tmp0 = tmp.substring(tmp.lastIndexOf("_")+ 1);		tmp = (new Number(tmp0)) + (new Number(vals[i].substring(idx0 + 1, idx1)));		// within 6 hours or within today		//if ((this.now - tmp) < 6 * 3600000 || tmp > this.today) {			arr.push(tmp0, "" + tmp, vals[i].substr(idx1 + 1));		//}	}	return arr;}Reservation.prototype.usable = function(ms0, ms1) {		if (!this.vals) {		return true;	}	for (var i = 0; i < this.vals.length; i += 3) {		if (this.vals[i+1] > ms0 && ms1 > this.vals[i]) {			return false;		}	}	return true;}Reservation.prototype.refresh = function(obj) {	var td = findParentTag(obj, "TD");	if (!td) {		return;	}	this.vals = this.toArray($(td).attr("rval"));	var re = this;	var begin = getDataTime(td);	$(td).find('[t=duration]').find("option").each(function() {		if (re.usable(begin, begin + $(this).attr("value"))) {			this.disabled = false;		} else {			this.disabled = true;		}	});	td = $(td).find('[t=duration]');}function validateComp(cType, org, val) {	if (!org || !val) {		return "";	}	var rserv = new Reservation();	return rserv.validate(org, val.mid(0, "+"), val.mid("+", ":"));}/*Returns milliseconds since midnight, January 1, 1970 in the GMT timezone.Get/Set value to keyUsage: datevar.val(key[, value])*/Date.prototype.val = function(key, value) {	var v = "";	if (key.length != 2) {		key = key.toLowerCase();	}	switch(key) {	case "yyyy":	case "YY":	case "year":		if (arguments.length > 1) {			this.setUTCFullYear(value);		} else {			v = this.getUTCFullYear();		}		break;	case "MM":	case "month":		if (arguments.length > 1) {			this.setUTCMonth(value - 1);		} else {			v = this.getUTCMonth() + 1;		}		break;	case "DD":	case "date":	case "days":		if (arguments.length > 1) {			this.setUTCDate(value);		} else {			v = this.getUTCDate();		}		break;	case "hh":	case "hours":		if (arguments.length > 1) {			this.setUTCHours(value);		} else {			v = this.getUTCHours();		}		break;	case "mm":	case "minutes":		if (arguments.length > 1) {			this.setUTCMinutes(value);		} else {			v = this.getUTCMinutes();		}		break;	case "ss":	case "seconds":		if (arguments.length > 1) {			this.setUTCSeconds(value);		} else {			v = this.getUTCSeconds();		}		break;	case "ms":		if (arguments.length > 1) {			this.setUTCMilliseconds(value);		} else {			v = this.getUTCMilliseconds();		}		break;	}	v += "";	if (key.length < v.length) {		v = v.substring(0, key.length);	} else if (key.length > v.length) {		v = v.pad(key.length);	} 	return v;};/*Returns date in array(year, month, date, hours, minutes, seconds, milliseconds) in specified timezone offset.Usage: datevar.val(timezoneoffset)Parameters:datevar Must. The date var to transform.timezoneoffsetOptional. The timezone offset could be hour(s)/minute(s)/millisecond(s). 0 if not specified. */Date.prototype.array = function(tz) {	if (arguments.length > 0) {		if (tz > -20.0 && tz < 20.0) {			tz *= 3600000;		} else if (tz > -1000 && tz < 1000) {			tz *= 60000;		}	} else {		tz = 0;	}		var d = (tz != 0) ? new Date(this + tz) : this;	return new Array(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());}/*Returns milliseconds since midnight, January 1, 1970 in the GMT timezone.Usage: datevar.now()*/Date.prototype.now = function() {	return this - 0;};// 对Date的扩展，�?Date 转化为指定格式的String// �?M)、日(d)、小�?h)、分(m)、秒(s)、季�?q) 可以�?1-2 个占位符�?// �?y)可以�?1-4 个占位符，毫�?S)只能�?1 个占位符(�?1-3 位的数字) // 例子�?// (new Date()).Format("yyyy-MM-dd hh:mm:ss.S") ==> 2006-07-02 08:09:04.423 // (new Date()).Format("yyyy-M-d h:m:s.S")      ==> 2006-7-2 8:9:4.18 Date.prototype.format = function (fmt) {    var o = {        "M+": this.getMonth() + 1,         "D+": this.getDate(),        "d+": this.getDate(),        "H+": this.getHours(),        "h+": this.getHours(),        "m+": this.getMinutes(),        "s+": this.getSeconds(),        "q+": Math.floor((this.getMonth() + 3) / 3),        "S": this.getMilliseconds()    };    if (/(y+)/i.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));    for (var k in o)    if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));    return fmt;}var txt2arrayError = false;function text2array(txt, comma, quote, line, trim) {	if (comma == "\t" || comma == "," || comma == " ") {		return txt2array(txt, comma, quote, line, trim);	}	if (!txt.contains("\t")) {		return txt2array(txt, ",", quote, line, trim);	}	if (!txt.contains(",")) {		return txt2array(txt, "\t", quote, line, trim);	}		var array0 = txt2array(txt, "\t", quote, line, trim);	if (txt2arrayError) {		return txt2array(txt, ",", quote, line, trim);	}		var array1 = txt2array(txt, ",", quote, line, trim);	if (txt2arrayError) {		return array0;	}		var rtn0 = len0 = len1 = num0 = num1 =0;	var avg;		if (array0.length > array1.length) {		rtn0++;	} else {		rtn0--;	}	for (var i = 0; i < array0.length; i++) {		len0 += array0[i].length;		avg = len0 / (i + 1)		num0 += Math.abs(array0[i].length - avg);	}	for (var j = 0; j < array1.length; j++) {		len1 += array1[j].length;		avg = len1 / (j + 1)		num1 += Math.abs(array1[j].length - avg);	}	if (len0 > len1) {		rtn0++;	} else {		rtn0--;	}	if (len0 / array0.length > len1 / array1.length) {		rtn0++;	} else {		rtn0--;	}	if (num1 > num0) {		rtn0++;	} else {		rtn0--;	}	return (rtn0 < 0) ? array1 : array0;}function txt2array(txt, comma, quote, line, trim) {	var array = new Array();	var tmp, rows=cols=0;	if (!txt) txt = "";	if (!comma) comma = ",";	if (!quote) quote = "\"";	if (!line) line = "\n";		txt2arrayError = false;		var check = (quote.length > 0);		var fields = (comma.length > 0) ? txt.split(comma): new Array(txt);		for (var i = 0; i < fields.length; i++) {		if (cols == 0) array[rows] = new Array();		if (check && fields[i].startsWith(quote)) {			var idx = quote.length;			while (idx > -1 && fields[i].indexOf(quote, idx) > 0) {				idx = fields[i].indexOf(quote, idx) + quote.length;				if (fields[i].substr(idx, quote.length) == quote) {					idx += quote.length;				} else if (fields[i].substr(idx, line.length) == line) {					array[rows][cols] = fields[i].substring(quote.length, idx - quote.length).split(quote + quote).join(quote);					cols = 0;					rows++;					fields[i] = fields[i].substr(idx + line.length);					if (fields[i].length > 0) i--;					idx = -1;				} else {					array[rows][cols] = fields[i].substring(quote.length, fields[i].length - quote.length).split(quote + quote).join(quote);					cols++;					idx = -1;					// Error?				}			}			if (idx > 0) {				if (fields.length - 1 > i) fields[i+1] = fields[i] + comma + fields[i+1];			}		} else {			if (check) {				if (fields[i].search((new RegExp("[^" + quote + "]+" + quote + "(" + quote + quote + ")*[^" + quote + "]+","g"))) > -1) {					txt2arrayError = true;					}			}			if (fields[i].contains(line)) {				array[rows][cols] = fields[i].mid(0, line);				cols = 0;				rows++;				fields[i] = fields[i].mid(line, fields[i].length);				//if (fields[i].length > 0) // comment out because it will remove the first empty item value 				if (i + 1 <= fields.length) 	i--;			} else {				array[rows][cols] = fields[i];				cols++;			}		}	}			if (trim) {		for (rows = 0; rows < array.length; rows++) {			for (cols = 0; cols < array[rows].length; cols++) {				array[rows][cols] = (array[rows][cols] + "").trim();			}		}	}	return array;}/*Returns the string without the heading/tailing spaces.Usage: stringvar.trim()Parameters:stringvar Must. The string to trim spaces.Returns:Returns the string without the heading/tailing spaces.*/String.prototype.trim = function() {	return this.replace(/^\s+/, '').replace(/\s+$/, '');};/*Returns the string without the heading spaces.Usage: stringvar.trimLeft()Parameters:stringvar Must. The string to trim spaces.Returns:Returns the string without the heading spaces.*/String.prototype.trimLeft = function() { 	return this.replace(/^\s+/, ''); };/*Returns the string without the tailing spaces.Usage: stringvar.trimRight()Parameters:stringvar Must. The string to trim spaces.Returns:Returns the string without the tailing spaces.*/String.prototype.trimRight = function() { 	return this.replace(/\s+$/, ''); };/*Returns the string with a substring padded on the left, right.Usage: stringvar.pad(length [, pad [, right]])Parameters:stringvar Must. The string to concat.length Must. The concatenated string's length. Not concat if the orginal string's length > specified length.padOptional. substring that will be concatenated. Use default string "0" if "" or not specified. It may be cut off if pad are more than one chars.rightOptional. Specifies the side where the concatenation will happen. false[Default]: left side; true: right side. Returns:The string with a substring padded on the left, right.Samples: var date = new Array("2011", "5", "18", "2", "20", "1"); msg += date[0] + "/" + date[1].pad(2) + "/" + date[2].pad(2) + " " + date[3].pad(2) + ":" + date[4].pad(2) + ":" + date[5].pad(2);*/String.prototype.pad = function(len, pad, right){	if (this.length >= len) {		return this;	}	len -= this.length;		// ten zeros	var pads = "0000000000";	if (arguments.length > 1 && pad.length > 0) {		pads = "" + pad;	}	while (pads.length < len) {		pads += pads;	}	return (right)? this + pads.substr(0, len) : pads.substr(0, len) + this;};/*Tests if the substring of this string beginning starts with the specified prefix, ignoring case differences. Usage: stringvar.startsWith(prefix [, ignoreCase ])Parameters:stringvar Must. The string to test.prefix Must. The string's prefix.ignoreCaseOptional. ignoring case differences when compareReturns:true if the character sequence represented by the argument is a prefix of the substring of this object starting at index toffset; false otherwiseSamples:  if("MM/DD/YYYY".startsWith("MM")) {    // ...  }  if("MM/DD/YYYY".startsWith("mm", true)) {    // ...  }*/String.prototype.startsWith = function(s, c) {	if (s && this.length >= s.length) {		var t = this.substr(0, s.length);		if (c) {			return (t.toLowerCase() == s.toLowerCase());		} 		return (t == s);	}	return false;};/*Tests if this string ends with the specified suffix, ignoring case differences. Usage: stringvar.endsWith(suffix [, ignoreCase])Parameters:stringvar Must. The string to test.suffix Must. The string's suffix.ignoreCaseOptional. ignoring case differences when compareReturns:true if the character sequence represented by the argument is a suffix of the character sequence represented by this object; false otherwise. Samples:  if("MM/DD/YYYY".endsWith("YYYY")) {    // ...  }  if("MM/DD/YYYY".endsWith("yyyy", true)) {    // ...  }*/String.prototype.endsWith = function(s, c) {	if (s && this.length >= s.length) {		var t = this.substr(this.length - s.length);		if (c) {			return (t.toLowerCase() == s.toLowerCase());		}		return (t == s);	}	return false;};/*Tests if and only if this string contains the specified sequence of char values ignoring case differences. Usage: stringvar.contains(sequence [, ignoreCase])Parameters:stringvar Must. The string to test.sequence Must. the sequence to search for ignoreCaseOptional. ignoring case differences when compareReturns:Returns true if and only if this string contains the specified sequence of char values. Samples:  if("MM/DD/YYYY".contains("YYYY")) {    // ...  }  if("MM/DD/YYYY".contains("yyyy", true)) {    // ...  }    String.prototype.pad = function(l, s, t){    return s || (s = " "), (l -= this.length) > 0 ? (s = new Array(Math.ceil(l / s.length)        + 1).join(s)).substr(0, t = !t ? l : t == 1 ? 0 : Math.ceil(l / 2))        + this + s.substr(0, l - t) : this;};*/String.prototype.contains = function(s, c) {	if (s && this.length >= s.length) {		if (c) {			return (this.toLowerCase().indexOf(s.toLowerCase()) > -1);		}		return (this.indexOf(s) > -1);	}	return false;}/*Tests if this string ends with the specified suffix, ignoring case differences. Usage: strVariable.mid(start[, end])Parameters:start Must. If Number type, the beginning index (0, if start<0); If String type, the string to beginning index.end Not Must. If Number type, the endding index; If String type, the string to endding index from start index.Returns:the specified substring; "", if not found start/end string or end index < start index or start index < 0. Samples:  if("MM/DD/YYYY".mid("/", "/") == "DD") {    // ...  }  if("MM/DD/YYYY".mid(3, "/") == "DD") {    // ...  }  if("MM/DD/YYYY".mid(3, 5) == "DD") {    // ...  }*/String.prototype.mid = function(s, e) {	var L,R;	//typeof value�?number", "string", "boolean", "object", "function", "undefined"	L = (typeof(s) + "").charAt(0);	if (L != 'n' && L != 's') return "";	R = (typeof(e) + "").charAt(0);	if (R != 'n' && R != 's' && R != 'u') return "";			if (L == 'n') {		L = (s < 0) ? 0 : s;	} else {		L=this.indexOf(s);		if (L < 0) return "";		L += s.length;	}	if (R == 'u') {		return this.substr(L);	}	R = (R == 'n') ? e : this.indexOf(e, L);		if (R <= L) return "";	if (R > this.length) R=this.length;		return (R < this.length) ? this.substring(L, R) : this.substr(L);}/*Replaces the lowest numbered place marker(%1, %2, ..., %9) with specified strings.Usage: strVariable.arg(arg0, [arg1...[, argN]])Parameters:arg0,...,argN Must. the string list to replace the marker.Returns:A copy of this string with the lowest numbered place marker replaced by string a, i.e., %1, %2, ..., %99.Samples:  var date = "%1/%2/%3".arg("05").arg(18).arg(2011); // date will be "05/18/2011"  date = "%1/%2/%3".arg("05", 18, 2011); // date will be "05/18/2011"    var now= new Array("05", 18, 2011);  date = "%1/%2/%3".arg(now); // date will be "05/18/2011"  date = "%1/%2/%3".arg("05", 18, "2011 %1:%2:%3").arg(12, 59, 59); // date will be "05/18/2011 12:59:59"  date = "%3/%2/%1".arg(18).arg("05").arg("2011"); // date will be "2011/05/18"  date = "%3/%2/%1".arg(18, "05", "2011"); // date will be "2011/05/18"  date = "%1/%2/%1".arg(18).arg("05").arg("2011"); // date will be "18/2011/05"  date = "%1/%2/%1".arg(18, "05", "2011"); // date will be "18/05/%1"  date = "%3/%2/%1".arg("18%1", "05%1", "2011%1"); // date will be "2011%1/05%1/18%1"  date = "%3/%2/%1".arg("18%1").arg("05%1").arg("2011%1"); // date will be "%3/%2/18052011%1"  */String.prototype.arg = function() {	if (arguments.length < 1 || !this.contains("%")) return this;		var args;	if (arguments.length == 1 && arguments[0] instanceof Array) {		args = arguments[0];	} else {		args = arguments;	}	var s = this;	var k = 0;	for (var i = 1; i < 10; i++) {		if (s.contains("%" + i)) {			s = s.replace("%" + i, args[k]);			if ((++k) == args.length) {				break;			}		}	}	return s; };String.prototype.toHex = function() {	return (new Number(this)).toString(16).toUpperCase();}Number.prototype.toHex = function() {	return this.toString(16).toUpperCase();}String.prototype.toJSON = function() {	try {		if (!this.startsWith("{")) {			return eval("({"+ this +"})"); 		} else {			return eval("("+ this +")"); 		}	} catch (msg) {		return {};	}}String.prototype.encodeAttr = function() {	if (this.contains("&amp;")) {		return this;	}	var val = this;	if (!val.contains("&amp;")) { 		val = val.replace(/&/g, "&amp;");	}	val = val.replace(/"/g, "&#34;").replace(/'/g, "&#39;").replace(/\r/g, "&#10;").replace(/\n/g, "&#13;").replace(/\</g, "&lt;").replace(/\>/g, "&gt;").replace(/\\/g, "&#92;");	return val;}String.prototype.decodeAttr = function() {	if (!this.contains("&")) {		return this;	}	var val = this;	val = val.replace(/&#34;/, '"').replace(/&#39;/, "'").replace(/&#10;/, '\r').replace(/&#13;/, "\n").replace(/&lt;/, "<").replace(/&gt;/, ">").replace(/&#92;/, "\\").replace(/&amp;/, "&");	// .replace(/&#44;/, ",").replace(/&#47;/, "/")	return val;}var _keyStr = "0123456789ABCDEFGHIJKLMNPQRSTUVW";/*Usage: strVariable.toN32([radix])*/String.prototype.toN32 = function(radix) {	var r = ((radix + "") in ["2", "8", "10", "16", "32"]) ? radix : 10;	var val = "";	var n = parseInt(this, r).toString(2);	var s = 0;	for (var e = n.length % 5; e <= n.length; e += 5) {		if (e > s) {			var i = parseInt(n.mid(s, e), 2);			val += _keyStr[i];		}		s = e;	}	return val;	}/*Usage: strVariable.fromN32([radix])*/String.prototype.fromN32 = function(radix) {	var r = ((radix + "") in ["2", "8", "10", "16", "32"]) ? radix : 10;	var val = "";	for (var i = 0; i < this.length; i++) {		val += _keyStr.indexOf(this.charAt(i)).toString(2).pad(5);	}	val = parseInt(val, r);	return val;	}function Duration() {	this.format = "YYYY/MM/DD hh:mm";	this.endDate = false;}Duration.prototype.show = function(val0, val1, tz) {	var date1 = (val0 instanceof Date)? val0 : new Date(val0);	var date2 = (val1 instanceof Date)? val1 : new Date(val1);	var d1 = date1.array(tz);	var d2 = date2.array(tz);		var htm = d1[1] + "/" + d1[2] + " " + d1[3] + ":" + d1[4] + " ~ ";	if (d2[1] == d1[1] && d2[2] == d1[2]) {		htm += d2[3] + ":" + d2[4];	} else {		htm += d2[1] + "/" + d1[2] + " " + d2[3] + ":" + d2[4];	}	return htm;}function obj2str(o){   var r = [];   if(o == null) {     return 'null';   }   if(typeof o == "string") {     return '"' + o.replace(/"/g, '\\"') + '"';   } else if(typeof o == "object"){     if(!o.sort){       r[0]="{"       for(var i in o){		if (i == "$$hashKey") continue;         r[r.length]='"' + i + '"';         r[r.length]=":";         r[r.length]=obj2str(o[i]);         r[r.length]=",";       }		if (r.length > 1) {			r[r.length-1]="}"		} else {			r[1]="}"		}     }else{       r[0]="["       for(var i =0;i<o.length;i++){         r[r.length]=obj2str(o[i]);         r[r.length]=",";       }       r[r.length-1]="]"     }     return r.join("");   }   return o.toString();}